javascript:(() => { const b64 = '
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Simple & Reliable Recorder</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; background-color: #f0f2f5; color: #1c1e21; display: flex; justify-content: center; align-items: center; min-height: 100vh; margin: 20px; }
        .container { width: 100%; max-width: 500px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1); padding: 24px; text-align: center; }
        h1 { font-size: 24px; margin: 0 0 12px; }
        p { font-size: 15px; color: #606770; line-height: 1.5; margin-bottom: 20px; }
        #visibility-warning { background-color: #fffbe6; color: #5c3c00; border: 1px solid #ffe58f; border-radius: 8px; padding: 12px 15px; margin-bottom: 20px; text-align: left; font-size: 14px; } 
        #visibility-warning strong { color: #d46b08; }
        #preview-area { position: relative; background-color: #000000; aspect-ratio: 16 / 9; border-radius: 8px; margin-bottom: 20px; overflow: hidden; }
        #compositing-canvas { display: none; }
        #screen-preview { width: 100%; height: 100%; }
        #webcam-preview { position: absolute; width: 130px; height: auto; aspect-ratio: 4 / 3; bottom: 15px; right: 15px; border: 2px solid rgba(255, 255, 255, 0.8); border-radius: 8px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3); display: none; background-color: #333; }
        
        #settings-guide { text-align: left; margin-bottom: 20px; border: 1px solid #ddd; border-radius: 8px; }
        #settings-guide summary { font-weight: 600; cursor: pointer; padding: 12px; list-style: none; display: flex; align-items: center; justify-content: space-between; }
        #settings-guide summary::-webkit-details-marker { display: none; }
        #settings-guide summary::after { content: '[+]'; font-family: monospace; }
        #settings-guide[open] { border-bottom: 1px solid #ddd; }
        #settings-guide[open] summary::after { content: '[-]'; font-family: monospace; }
        .guide-content { padding: 0 15px 15px; font-size: 14px; line-height: 1.6; border-top: 1px solid #ddd; }
        .guide-content strong { display: block; margin-top: 12px; font-size: 15px; }
        .guide-content ul { padding-left: 20px; margin: 5px 0 0; }
        .settings-link { display: inline-block; margin-top: 5px; padding: 6px 10px; background-color: #e4e6eb; color: #050505; text-decoration: none; border-radius: 6px; font-weight: 600; }

        #controls { display: grid; grid-template-columns: 1fr; gap: 12px; }
        #main-controls { display: grid; grid-template-columns: 1fr 1fr; gap: 12px; }
        button { font-size: 16px; font-weight: 600; padding: 12px; border-radius: 8px; border: none; cursor: pointer; transition: all 0.2s ease; }
        button:active { transform: scale(0.98); }
        button:disabled { cursor: not-allowed; opacity: 0.6; }
        #enable-button { background-color: #1877f2; color: white; }
        #start-button { background-color: #42b72a; color: white; }
        #stop-button { background-color: #fa3e3e; color: white; }
        #download-button { background-color: #1877f2; color: white; grid-column: 1 / -1; } /* Span full width */
        #status-text { min-height: 20px; margin-top: 15px; font-size: 14px; color: #606770; }
        
        #playback-container { display: none; width: 90%; max-width: 960px; background-color: #ffffff; border-radius: 12px; box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1); padding: 24px; text-align: center; }
        #playback-video { width: 100%; border-radius: 8px; margin-bottom: 20px; background-color: #000; }
        
        @keyframes recording-pulse { 0%, 100% { background-color: #fa3e3e; } 50% { background-color: #d32f2f; } }
        #stop-button.recording { animation: recording-pulse 1.5s infinite; }
    </style>
</head>
<body>
    <div id="recorder-container" class="container">
        <h1>Simple & Reliable Recorder</h1>
        <p>This tool uses your browser's built-in device selection. The prompt will include a dropdown to choose your camera if you have more than one.</p>
        <p id="visibility-warning"><strong>Important:</strong> This window must remain open and visible for the recording to work. If minimized or covered, your browser may throttle the video capture, causing it to freeze.</p>
        <details id="settings-guide">
            <summary>How to Set Your Default Device</summary>
            <div class="guide-content">
                <strong>1. Reset Browser Permissions (If Needed)</strong>
                <ul><li>If you don't get a permission pop-up, you may have previously blocked it.</li><li>Click the Padlock icon in the address bar and set Camera and Microphone to "Allow".</li></ul>
                <strong>2. Set Default Audio Device in Windows</strong>
                <ul><li>Click this link to open Sound settings: <a href="ms-settings:sound" class="settings-link">Open Sound Settings</a></li><li>Under "Input", choose your desired microphone. This will be the browser's default.</li></ul>
                <strong>3. Set Default Audio Device in macOS</strong>
                <ul><li>Go to <strong>Apple menu > System Settings > Sound</strong>.</li><li>In the "Input" tab, select the device you want to use as your default.</li></ul>
            </div>
        </details>
        <div id="preview-area">
            <video id="screen-preview" autoplay muted></video>
            <video id="webcam-preview" autoplay muted></video>
            <canvas id="compositing-canvas"></canvas>
        </div>
        <div id="controls">
            <button id="enable-button">Enable Camera & Mic</button>
            <div id="main-controls" style="display: none;">
                <button id="start-button">Start Recording</button>
                <button id="stop-button" disabled>Stop Recording</button>
            </div>
        </div>
        <div id="status-text">Click "Enable Camera & Mic" to show the permission prompt.</div>
    </div>
    <div id="playback-container">
        <h1>Recording Playback</h1>
        <video id="playback-video" controls autoplay></video>
        <div id="controls">
            <a id="download-link" download="recording.webm"><button id="download-button">Download File</button></a>
        </div>
    </div>
    <script>
        const el = id => document.getElementById(id);
        const [recorderContainer, playbackContainer, enableBtn, mainControls, startBtn, stopBtn, screenPreview, webcamPreview, canvas, statusText, playbackVideo, downloadLink] =
            ['recorder-container', 'playback-container', 'enable-button', 'main-controls', 'start-button', 'stop-button', 'screen-preview', 'webcam-preview', 'compositing-canvas', 'status-text', 'playback-video', 'download-link'].map(id => el(id));
        
        let ctx = canvas.getContext('2d');
        let mediaRecorder, recordedChunks = [], screenStream, userStream, animationFrameId;
        
        async function enableCameraAndMic() {
            try {
                enableBtn.disabled = true;
                statusText.textContent = "Waiting for permission...";
                userStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });
                webcamPreview.srcObject = userStream;
                webcamPreview.style.display = 'block';
                statusText.textContent = "Camera enabled. Ready to start recording.";
                enableBtn.style.display = 'none';
                mainControls.style.display = 'grid';
            } catch (err) {
                console.error("Camera/Mic permission denied:", err);
                statusText.innerHTML = "Camera/Mic permission denied. <br>Please check settings in the guide above and refresh.";
                enableBtn.disabled = false;
            }
        }
        async function startRecording() {
            try {
                startBtn.disabled = true;
                statusText.textContent = "Requesting screen sharing permission...";
                screenStream = await navigator.mediaDevices.getDisplayMedia({ video: { cursor: 'always' } });
                screenPreview.srcObject = screenStream;
                screenStream.getVideoTracks()[0].onended = () => mediaRecorder?.state === 'recording' && stopRecording();
                const screenSettings = screenStream.getVideoTracks()[0].getSettings();
                canvas.width = screenSettings.width;
                canvas.height = screenSettings.height;
                drawToCanvas();
                const audioTracks = userStream?.getAudioTracks() || [];
                const canvasStream = canvas.captureStream(30);
                if (audioTracks.length > 0) canvasStream.addTrack(audioTracks[0]);
                recordedChunks = [];
                mediaRecorder = new MediaRecorder(canvasStream, { mimeType: 'video/webm; codecs=vp9,opus' });
                mediaRecorder.ondataavailable = e => e.data.size > 0 && recordedChunks.push(e.data);
                mediaRecorder.onstop = showPlayback;
                mediaRecorder.start();
                statusText.textContent = 'Recording in progress...';
                stopBtn.disabled = false;
                stopBtn.classList.add('recording');
            } catch (err) {
                console.error("Start Recording Failed:", err);
                statusText.textContent = "Screen sharing was denied. Please refresh to try again.";
                startBtn.disabled = false;
            }
        }
        function drawToCanvas() {
            ctx.drawImage(screenPreview, 0, 0, canvas.width, canvas.height);
            if (webcamPreview.style.display !== 'none' && webcamPreview.videoWidth > 0) {
                const webcamWidth = canvas.width * 0.25;
                const webcamHeight = webcamWidth * (webcamPreview.videoHeight / webcamPreview.videoWidth);
                const margin = canvas.width * 0.02;
                ctx.drawImage(webcamPreview, canvas.width - webcamWidth - margin, canvas.height - webcamHeight - margin, webcamWidth, webcamHeight);
            }
            animationFrameId = requestAnimationFrame(drawToCanvas);
        }
        function stopRecording() {
            if (mediaRecorder?.state === 'recording') mediaRecorder.stop();
        }
        function showPlayback() {
            cancelAnimationFrame(animationFrameId);
            stopBtn.disabled = true;
            stopBtn.classList.remove('recording');
            const blob = new Blob(recordedChunks, { type: 'video/webm' });
            const url = URL.createObjectURL(blob);
            playbackVideo.src = url;
            downloadLink.href = url;
            downloadLink.download = `recording-${new Date().toISOString().slice(0,19).replace(/[T:]/g, '-')}.webm`;
            [screenStream, userStream].forEach(stream => stream?.getTracks().forEach(track => track.stop()));
            recorderContainer.style.display = 'none';
            playbackContainer.style.display = 'block'; // Use 'block' to fix the layout issue
        }
        
        enableBtn.addEventListener('click', enableCameraAndMic);
        startBtn.addEventListener('click', startRecording);
        stopBtn.addEventListener('click', stopRecording);
    </script>
</body>
</html>
'; const decoded = atob(b64); const win = window.open(); win.document.write(decoded); win.document.close(); })();
